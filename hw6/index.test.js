'use strict';

test('test_string', () => {
    expect('Vova Gavrylov'.length).toEqual(13);
    expect(String.fromCharCode(86, 111, 118, 97)).toEqual('Vova');
    expect(String.fromCodePoint(42)).toEqual('*');
    expect('JavaScript'.charAt(5)).toEqual('c');
    expect('JavaScript'.charAt(30)).toEqual('');
    expect('Vova'.charCodeAt(2)).toEqual(118);
    expect('*'.codePointAt(0)).toEqual(42);
    expect('ABC'.codePointAt(20)).toEqual(undefined);
    expect('Have'.concat(' a', ' nice', ' day!')).toEqual('Have a nice day!');
    expect('JavaScript is a programming language'.endsWith('language')).toEqual(true);
    expect('JavaScript is a programming language'.endsWith('programming', 27)).toEqual(true);
    expect('CSS is a style sheet language'.includes('style')).toEqual(true);
    expect('CSS is a style sheet language'.includes('style', 15)).toEqual(false);
    expect('CSS is a style sheet language'.indexOf('style')).toEqual(9);
    expect('CSS is a style sheet language'.indexOf('CSS')).toEqual(0);
    expect('CSS is a style sheet language'.indexOf('css')).toEqual(-1);
    expect('CSS is a style sheet language'.indexOf('html')).toEqual(-1);
    expect('CSS is a style sheet language'.indexOf('a', 10)).toEqual(22);
    expect('CSS is a style sheet language'.indexOf('', 50)).toEqual(29);
    expect('Have a nice day!'.lastIndexOf('a')).toEqual(13);
    expect('Have a nice day!'.lastIndexOf('a', 8)).toEqual(5);
    expect('Card: '.padEnd(10, '*')).toEqual('Card: ****');
    expect('abc'.padEnd(5,'123456789')).toEqual('abc12');
    expect('abc'.padEnd(1)).toEqual('abc');
    expect('abc'.padStart(10, '123')).toEqual('1231231abc');
    expect('abc'.padStart(1)).toEqual('abc');
    expect('css'.repeat(0)).toEqual('');
    expect('css'.repeat(1)).toEqual('css');
    expect('css'.repeat(2)).toEqual('csscss');
    expect('A nice day and a nice evening!'.replace('nice', 'good')).toEqual('A good day and a nice evening!');
    expect('A nice day and a nice evening!'.replace(/nice/g, 'good')).toEqual('A good day and a good evening!');
    expect('A Nice day and a nice evening!'.replace(/nice/g, 'good')).toEqual('A Nice day and a good evening!');
    expect('A Nice day and a nice evening!'.replace(/nice/gi, 'good')).toEqual('A good day and a good evening!');
    expect('CSS is a style sheet language'.search('style')).toEqual(9);
    expect('JavaScript is a programming language'.slice(0, 10)).toEqual('JavaScript');
    expect('JavaScript is a programming language'.slice(11, 27)).toEqual('is a programming');
    expect('JavaScript is a programming language'.slice(16)).toEqual('programming language');
    expect('JavaScript is a programming language'.slice(16, -9)).toEqual('programming');
    expect('JavaScript is a programming language'.slice(-8, -4)).toEqual('lang');
    expect('Vova Gavrylov'.split(' ')).toEqual(['Vova', 'Gavrylov']);
    expect('Vova Gavrylov'.split(' ', 1)).toEqual(['Vova']);
    expect('JavaScript is a programming language'.startsWith('JavaScript')).toEqual(true);
    expect('JavaScript is a programming language'.startsWith('programming', 16)).toEqual(true);
    expect('JavaScript is a programming language'.substring(0, 10)).toEqual('JavaScript');
    expect('JavaScript is a programming language'.substring(5, 5)).toEqual('');
    expect('JavaScript is a programming language'.substring(16)).toEqual('programming language');
    expect('JavaScript'.toLocaleLowerCase()).toEqual('javascript');
    expect('JavaScript'.toLocaleUpperCase()).toEqual('JAVASCRIPT');
    expect('JavaScript'.toLowerCase()).toEqual('javascript');
    expect('JavaScript'.toUpperCase()).toEqual('JAVASCRIPT');
    expect('   Vova Gavrylov   '.trim()).toEqual('Vova Gavrylov');
    expect('   Vova Gavrylov   '.trimRight()).toEqual('   Vova Gavrylov');
    expect('   Vova Gavrylov   '.trimLeft()).toEqual('Vova Gavrylov   ');
    expect(1 + '5').toEqual('15');
});

test('test_numbers', () => {
    expect(Number.isFinite(5)).toEqual(true);
    expect(Number.isFinite('5')).toEqual(false);
    expect(Number.isInteger(0.1)).toEqual(false);
    expect(Number.isInteger(10)).toEqual(true);
    expect(Number.isInteger('10')).toEqual(false);
    expect(Number.isNaN(NaN)).toEqual(true);
    expect(Number.isNaN(0 / 0)).toEqual(true);
    expect(Number.isNaN(15)).toEqual(false);
    expect(Number.isNaN('15')).toEqual(false);
    expect(Number.isNaN('NaN')).toEqual(false);
    expect(Number.isNaN(null)).toEqual(false);
    expect(Number.isSafeInteger(3)).toEqual(true);
    expect(Number.isSafeInteger('3')).toEqual(false);
    expect(Number.parseFloat('10')).toEqual(10);
    expect(Number.parseFloat('10.5')).toEqual(10.5);
    expect(Number.parseInt('10')).toEqual(10);
    expect(Number.parseInt('10.5')).toEqual(10);
    expect((43.1234).toExponential()).toEqual('4.31234e+1');
    expect((43.1234).toExponential(2)).toEqual('4.31e+1');
    expect((85.6789).toFixed()).toEqual('86');
    expect((85.6789).toFixed(1)).toEqual('85.7');
    expect((85.6789).toFixed(6)).toEqual('85.678900');
    expect((85.6789).toPrecision()).toEqual('85.6789');
    expect((85.6789).toPrecision(3)).toEqual('85.7');
    expect((789.5).toString()).toEqual('789.5');
    expect((7 + 3).valueOf()).toEqual(10);
});

test('test_arrays', () => {
    let skills = ['php', 'mysql', 'js', 'css', 'html'];
    let animals = ['Lion', 'Tiger', 'Penguin', 'Lion'];
    let fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];

    expect(skills.length).toEqual(5);
    expect(Array.from('foo')).toEqual(['f', 'o', 'o']);
    expect(Array.from([1, 2, 3], x => x + x)).toEqual([2, 4, 6]);
    expect(Array.isArray(skills)).toEqual(true);
    expect(Array.isArray([])).toEqual(true);
    expect(Array.isArray({})).toEqual(false);
    expect(Array.of(1, 2, 3)).toEqual([1, 2, 3]);
    expect(['a', 'b', 'c'].concat(['d', 'e', 'f'])).toEqual(['a', 'b', 'c', 'd', 'e', 'f']);
    expect([1, 2, 3, 4, 5].copyWithin(0, 3)).toEqual([4, 5, 3, 4, 5]);
    expect([1, 2, 3, 4, 5].copyWithin(0, 3, 4)).toEqual([4, 2, 3, 4, 5]);
    expect([1, 2, 3, 4, 5].copyWithin(0, -2, -1)).toEqual([4, 2, 3, 4, 5]);
    expect([12, 5, 8, 130, 44].every(elem => elem >= 10)).toEqual(false);
    expect([12, 54, 18, 130, 44].every(elem => elem >= 10)).toEqual(true);
    expect([1, 2, 3].fill(5)).toEqual([5, 5, 5]);
    expect([1, 2, 3].fill(5, 1)).toEqual([1, 5, 5]);
    expect([1, 2, 3].fill(5, 1, 2)).toEqual([1, 5, 3]);
    expect(skills.filter(skill => skill.length > 3)).toEqual(['mysql', 'html']);
    expect(skills.find(skill => skill.length > 3)).toEqual('mysql');
    expect(skills.find(skill => skill.length > 2)).toEqual('php');
    expect(skills.find(skill => skill.length > 10)).toEqual(undefined);
    expect(skills.findIndex(skill => skill.length > 3)).toEqual(1);
    expect(skills.findIndex(skill => skill.length > 2)).toEqual(0);
    expect(skills.findIndex(skill => skill.length > 10)).toEqual(-1);
    expect(skills.includes('mysql')).toEqual(true);
    expect(skills.includes('MySQL')).toEqual(false);
    expect(skills.includes('python')).toEqual(false);
    expect(skills.indexOf('mysql')).toEqual(1);
    expect(skills.indexOf('js')).toEqual(2);
    expect(skills.indexOf('MySQL')).toEqual(-1);
    expect(skills.indexOf('python')).toEqual(-1);
    expect(animals.indexOf('Lion')).toEqual(0);
    expect(animals.indexOf('Lion', 1)).toEqual(3);
    expect(animals.indexOf('Lion', -1)).toEqual(3);
    expect(skills.join()).toEqual('php,mysql,js,css,html');
    expect(skills.join(' ')).toEqual('php mysql js css html');
    expect(skills.join('-')).toEqual('php-mysql-js-css-html');
    expect(animals.lastIndexOf('Lion')).toEqual(3);
    expect(animals.lastIndexOf('Tiger')).toEqual(1);
    expect(animals.lastIndexOf('tiger')).toEqual(-1);
    expect(animals.lastIndexOf('Lion', 2)).toEqual(0);
    expect(animals.lastIndexOf('Lion', -1)).toEqual(3);
    expect(animals.lastIndexOf('Lion', -2)).toEqual(0);
    expect([1, 2, 3].map(num => num + 1)).toEqual([2, 3, 4]);
    expect(skills.pop()).toEqual('html');
    expect(skills).toEqual(['php', 'mysql', 'js', 'css']);
    expect([].pop()).toEqual(undefined);
    expect(skills.push('html')).toEqual(5);
    expect(skills).toEqual(['php', 'mysql', 'js', 'css', 'html']);
    expect(skills.reverse()).toEqual(['html', 'css', 'js', 'mysql', 'php']);
    expect(skills).toEqual(['html', 'css', 'js', 'mysql', 'php']);
    expect(skills.shift()).toEqual('html');
    expect(skills).toEqual(['css', 'js', 'mysql', 'php']);
    expect([].shift()).toEqual(undefined);
    expect(fruits.slice(1)).toEqual(['Orange', 'Lemon', 'Apple', 'Mango']);
    expect(fruits.slice(1, 3)).toEqual(['Orange', 'Lemon']);
    expect(fruits.slice(2, -1)).toEqual(['Lemon', 'Apple']);
    expect(fruits.slice(-3, -2)).toEqual(['Lemon']);
    expect(fruits.slice(-3, -4)).toEqual([]);
    expect([2, 5, 8, 1, 4].some(elem => elem > 10)).toEqual(false);
    expect([12, 5, 8, 1, 4].some(elem => elem > 10)).toEqual(true);
    expect(fruits.sort()).toEqual(['Apple', 'Banana', 'Lemon', 'Mango', 'Orange']);
    expect(fruits).toEqual(['Apple', 'Banana', 'Lemon', 'Mango', 'Orange']);
    expect([1, 2, 10, 21].sort()).toEqual([1, 10, 2, 21]);
    expect(fruits.splice(3, 0, 'Melon')).toEqual([]);
    expect(fruits).toEqual(['Apple', 'Banana', 'Lemon', 'Melon', 'Mango', 'Orange']);
    expect(fruits.splice(3, 1)).toEqual(['Melon']);
    expect(fruits).toEqual(['Apple', 'Banana', 'Lemon', 'Mango', 'Orange']);
    expect(fruits.splice(3, 1, 'Melon')).toEqual(['Mango']);
    expect(fruits).toEqual(['Apple', 'Banana', 'Lemon', 'Melon', 'Orange']);
    expect(fruits.toString()).toEqual('Apple,Banana,Lemon,Melon,Orange');
    expect(fruits.unshift('Mango', 'Coconut')).toEqual(7);
    expect(fruits).toEqual(['Mango', 'Coconut', 'Apple', 'Banana', 'Lemon', 'Melon', 'Orange']);
});

test('test_compare_operators', () => {
    expect(5 > 5).toEqual(false);
    expect(5 > '5').toEqual(false);
    expect(5 > 7).toEqual(false);
    expect(7 > 5).toEqual(true);
    expect(7 > '5').toEqual(true);
    expect(5 < 5).toEqual(false);
    expect(5 < '5').toEqual(false);
    expect(5 < 7).toEqual(true);
    expect(7 < 5).toEqual(false);
    expect(5 < '7').toEqual(true);
    expect(5 >= 5).toEqual(true);
    expect(5 >= '5').toEqual(true);
    expect(5 >= 7).toEqual(false);
    expect(7 >= 5).toEqual(true);
    expect(7 >= '5').toEqual(true);
    expect(5 <= 5).toEqual(true);
    expect(5 <= '5').toEqual(true);
    expect(5 <= 7).toEqual(true);
    expect(7 <= 5).toEqual(false);
    expect('7' >= 5).toEqual(true);
    expect('5' < '15').toEqual(false);
    expect('15' < '5').toEqual(true);
    expect('ab' < 'cd').toEqual(true);
    expect('a' > 'A').toEqual(true);
    expect('one' > 'hello').toEqual(true);
    expect('Glow' > 'Glee').toEqual(true);
    expect('Bee' > 'Be').toEqual(true);
    expect(false < true).toEqual(true);
    expect(true < false).toEqual(false);
    expect(false < 1).toEqual(true);
});

test('test_equality_comparison_algorithm', () => {
    expect(5 == 5).toEqual(true);
    expect(5 === 5).toEqual(true);
    expect(5 == '5').toEqual(true);
    expect(5 === '5').toEqual(false);
    expect(5 == 7).toEqual(false);
    expect(5 === 7).toEqual(false);
    expect(5 != 7).toEqual(true);
    expect(5 !== 7).toEqual(true);
    expect(5 != '5').toEqual(false);
    expect(5 !== '5').toEqual(true);
    expect(1 == true).toEqual(true);
    expect(1 === true).toEqual(false);
    expect(2 == true).toEqual(false);
    expect(0 == false).toEqual(true);
    expect(0 === false).toEqual(false);
    expect('false' == false).toEqual(false);
    expect(NaN == NaN).toEqual(false);
    expect(NaN === NaN).toEqual(false);
    expect(NaN !== NaN).toEqual(true);
    expect(NaN != NaN).toEqual(true);
    expect(undefined == undefined).toEqual(true);
    expect(undefined === undefined).toEqual(true);
    expect(null == null).toEqual(true);
    expect(null === null).toEqual(true);
    expect(null == 0).toEqual(false);
    expect(null === 0).toEqual(false);
    expect(NaN == undefined).toEqual(false);
    expect(NaN === undefined).toEqual(false);
    expect(NaN == null).toEqual(false);
    expect(NaN === null).toEqual(false);
    expect(undefined == null).toEqual(true);
    expect(undefined === null).toEqual(false);
    expect('' == 0).toEqual(true);
    expect('' === 0).toEqual(false);
    expect('' == 1).toEqual(false);
    expect('abc' == NaN).toEqual(false);
});
